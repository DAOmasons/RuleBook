import{_ as e,o as t,c as a,R as i}from"./chunks/framework.XZNukU41.js";const m=JSON.parse('{"title":"RequestRegistry Contract","description":"","frontmatter":{},"headers":[],"relativePath":"tech/RegistryReadme.md","filePath":"tech/RegistryReadme.md"}'),o={name:"tech/RegistryReadme.md"},n=i('<h1 id="requestregistry-contract" tabindex="-1">RequestRegistry Contract <a class="header-anchor" href="#requestregistry-contract" aria-label="Permalink to &quot;RequestRegistry Contract&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p><code>RequestRegistry</code> is a Solidity smart contract designed to manage funding requests and allocations within a system that integrates with the Hats protocol. It allows for the creation and management of requests, each tied to a specific funding source or &quot;ship&quot;.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>Interaction with the Hats protocol for access control.</li><li>Management of funding requests and allocations.</li><li>Tracking and changing the status of requests.</li><li>Ensuring spending limits within defined thresholds.</li></ul><h2 id="contract-structure" tabindex="-1">Contract Structure <a class="header-anchor" href="#contract-structure" aria-label="Permalink to &quot;Contract Structure&quot;">​</a></h2><h3 id="enums-and-structs" tabindex="-1">Enums and Structs <a class="header-anchor" href="#enums-and-structs" aria-label="Permalink to &quot;Enums and Structs&quot;">​</a></h3><ul><li><code>Status</code>: Enum representing the state of a request (Pending, Rejected, Approved, Distributed).</li><li><code>Metadata</code>: Struct for metadata associated with requests and ships, supporting various types like IPFS, URL, JSON, and Arweave.</li><li><code>Request</code>: Struct representing a funding request, including amount, status, and metadata.</li><li><code>Ship</code>: Struct representing a funding source or allocation unit.</li></ul><h3 id="state-variables" tabindex="-1">State Variables <a class="header-anchor" href="#state-variables" aria-label="Permalink to &quot;State Variables&quot;">​</a></h3><ul><li><code>IHats hats</code>: Interface instance for the Hats protocol.</li><li><code>uint256 facilitatorHatId</code>: ID for tracking facilitators.</li><li><code>uint256 nonce</code>: Incremental ID for requests.</li><li><code>mapping(uint256 =&gt; Request) requests</code>: Mapping of nonce to request details.</li><li><code>mapping(uint256 =&gt; Ship) ships</code>: Mapping of ship ID to ship details.</li></ul><h3 id="custom-errors" tabindex="-1">Custom Errors <a class="header-anchor" href="#custom-errors" aria-label="Permalink to &quot;Custom Errors&quot;">​</a></h3><ul><li><code>NotAuthorized</code></li><li><code>ShipDoesNotExist</code></li><li><code>SpendingCapExceeded</code></li></ul><h3 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h3><ul><li><code>RequestCreated</code></li><li><code>ShipDeployed</code></li><li><code>RequestStatusChanged</code></li><li><code>GrantShipsDeployed</code></li></ul><h3 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h3><p>Initializes the contract with the Hats protocol, sets the facilitator hat ID, and deploys ships based on provided data.</p><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><ul><li><code>createRequest</code>: Creates a new funding request.</li><li><code>changeRequestStatus</code>: Changes the status of a request.</li><li><code>getShip</code>: Fetches details of a specific ship.</li><li><code>getFundingAvailable</code>: Calculates and returns the remaining funds for a ship.</li></ul><h2 id="security-and-access-control" tabindex="-1">Security and Access Control <a class="header-anchor" href="#security-and-access-control" aria-label="Permalink to &quot;Security and Access Control&quot;">​</a></h2><p>The contract uses the Hats protocol for role-based access control, ensuring that only authorized users can perform specific actions such as creating requests or changing their statuses.</p><h2 id="spending-limitations" tabindex="-1">Spending Limitations <a class="header-anchor" href="#spending-limitations" aria-label="Permalink to &quot;Spending Limitations&quot;">​</a></h2><p>Implements checks to prevent requests from exceeding the total distribution amount of a ship.</p><h2 id="event-logging" tabindex="-1">Event Logging <a class="header-anchor" href="#event-logging" aria-label="Permalink to &quot;Event Logging&quot;">​</a></h2><p>All critical state changes in the contract emit events for transparency and auditability.</p><h2 id="recommendations-for-use" tabindex="-1">Recommendations for Use <a class="header-anchor" href="#recommendations-for-use" aria-label="Permalink to &quot;Recommendations for Use&quot;">​</a></h2><ul><li>Ensure understanding of the Hats protocol as it is integral to the contract&#39;s functionality.</li><li>Pay attention to the contract&#39;s spending cap mechanism to avoid exceeding allocation limits.</li><li>Utilize the emitted events for tracking and monitoring contract interactions.</li></ul><h2 id="development-and-testing" tabindex="-1">Development and Testing <a class="header-anchor" href="#development-and-testing" aria-label="Permalink to &quot;Development and Testing&quot;">​</a></h2><ul><li>Implement comprehensive tests, including differential testing using Forge.</li><li>Conduct fuzz testing to uncover edge cases.</li><li>Employ <code>ffi</code> cheat codes in Forge for testing against non-EVM executables.</li></ul>',28),s=[n];function r(c,l,d,u,h,g){return t(),a("div",null,s)}const f=e(o,[["render",r]]);export{m as __pageData,f as default};
